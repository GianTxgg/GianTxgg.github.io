<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬取博客园文章</title>
      <link href="/2019/10/11/python-pa-qu-bo-ke-yuan-wen-zhang/"/>
      <url>/2019/10/11/python-pa-qu-bo-ke-yuan-wen-zhang/</url>
      
        <content type="html"><![CDATA[<pre><code>import requestsfrom bs4 import BeautifulSoupimport reimport urllib.requestimport sqlite3res = requests.get(&#39;https://www.cnblogs.com/over140/&#39;)res.encoding = (&#39;utf-8&#39;)soup1 = BeautifulSoup(res.text,&#39;html.parser&#39;)#获取时间# def getBlogWriteTime(url):#     res = requests.get(url)#     res.encoding = (&#39;utf-8&#39;)#     soup = BeautifulSoup(res.text,&#39;html.parser&#39;)#     return soup.select(&#39;#post-date&#39;)[0].text#建库conn = sqlite3.connect(&#39;pachong.db&#39;)cursor = conn.cursor()c = conn.cursor()conn.commit()#建表sql_create = &#39;&#39;&#39;create table blog(tittle text,url text,nr text)&#39;&#39;&#39;cursor.execute(sql_create)conn.commit()#获取标题和链接num = 1for pt in soup1.select(&#39;.postTitle2&#39;):    #print(num,&#39;\t&#39;,pt.text,&#39;\t&#39;,pt[&#39;href&#39;],&#39;\t&#39;,getBlogWriteTime(pt[&#39;href&#39;]))#标题+链接+时间               tittle = pt.text        url = pt[&#39;href&#39;]        res = requests.get(url)        soup2 = BeautifulSoup(res.text,&#39;html.parser&#39;)        div = soup2.find(id=&quot;cnblogs_post_body&quot;)        nr = div.get_text()        #print(div.get_text())        print(num,pt.text,&#39;\t&#39;,pt[&#39;href&#39;],&#39;\t&#39;,nr,&#39;\t&#39;)        c.execute(&quot;insert into blog values(?,?,?)&quot;,(tittle,url,nr))        conn.commit()                num = num + 1conn.close()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/2019/09/25/python-xue-xi/"/>
      <url>/2019/09/25/python-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell编程之sed与awk</title>
      <link href="/2019/09/19/shell-bian-cheng-zhi-sed-yu-awk/"/>
      <url>/2019/09/19/shell-bian-cheng-zhi-sed-yu-awk/</url>
      
        <content type="html"><![CDATA[<h1 id="sed命令的常用操作"><a href="#sed命令的常用操作" class="headerlink" title="sed命令的常用操作"></a>sed命令的常用操作</h1><p>sed是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出或者加上 -i 参数(此时处理结果不会发送值屏幕)</p><h2 id="一-正则表达式"><a href="#一-正则表达式" class="headerlink" title="一.正则表达式"></a>一.正则表达式</h2><h3 id="1-基础正则表达式"><a href="#1-基础正则表达式" class="headerlink" title="1.基础正则表达式"></a>1.基础正则表达式</h3><table><thead><tr><th>元字符</th><th>作用</th></tr></thead><tbody><tr><td>\</td><td>转义字符，用于取消特殊符号的含义，如：!\、\n等</td></tr><tr><td>^</td><td>匹配字符串的开始位置，如: ^world 匹配以world 开头的行</td></tr><tr><td>$</td><td>匹配字符串的结束位置，如: world$匹配以world结尾的行</td></tr></tbody></table><table><thead><tr><th>元字符</th><th>作用</th></tr></thead><tbody><tr><td>.</td><td>匹配除\n (换行)之外的任意一个字符</td></tr><tr><td>*</td><td>匹配前面的子表达式0次或者多次</td></tr><tr><td>[list]</td><td>匹配list列表中的一个字符，如: [0-9] 匹配任一位数字</td></tr><tr><td>[^list]</td><td>匹配不在list列表中的一个字符，如: [^0-9] 匹配任意-” 位非数字字符</td></tr><tr><td>{n}</td><td>匹配前面的子表达式n次，如: [0-9]{2} 匹配两位数字</td></tr><tr><td>{n,}</td><td>匹配前面的子表达式不少于n次，如: [0-9]{2,} 表示两位及两位以上数字</td></tr><tr><td>{n,m}</td><td>匹配前面的子表达式n到m次，如: [a-z]{2,3} 匹配两到三位的小写字母</td></tr></tbody></table><h3 id="2-扩展正则表达式"><a href="#2-扩展正则表达式" class="headerlink" title="2.扩展正则表达式"></a>2.扩展正则表达式</h3><table><thead><tr><th>元字符</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>匹配前面的子表达式1次以上，如: go+d, 将匹配至少一个o</td></tr><tr><td>？</td><td>匹配前面的子 表达式0次或者1次，如go?d, 将匹配gd或god</td></tr><tr><td>（）</td><td>将()号中的字符串作为一个整体，如: (xzy)+, 将匹配xyz 整体1次以上</td></tr><tr><td>|</td><td>以或的方式匹配字符串，如: good|great, 将匹配good或者great</td></tr></tbody></table><h2 id="二-sed工具概述"><a href="#二-sed工具概述" class="headerlink" title="二.sed工具概述"></a>二.sed工具概述</h2><h3 id="1-sed基本语法"><a href="#1-sed基本语法" class="headerlink" title="1.sed基本语法"></a>1.sed基本语法</h3><p>命令语法:<br>sed -e ‘编辑指令’ 文件1 文件2…<br>sed -n -e ‘编辑指令’ 文件1 文件2…<br>sed -i -e ‘编辑指令’ 文件1 文件2….<br>常用选项:<br>-e 指定要执行的命令，只有一个编辑命令时可省略。<br>-n只输出处理后的行，读入时不显示。<br>-i 直接编辑文件，而不输出结果。</p><p>编辑指令格式: [地址 1][地址2]操作[参数]<br>与grep一样，Sed在文件查找时也可以使用正则表达式和各种元字符。这里的“地址”就可以是正则表达式，也可以是数字、$,如果没有地址就代表是所有的行。常用的“操作”及作用如表10-4所示。“参数” -般用g代表只要符合条件，全部都进行处理。</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>p</td><td>输出指定的行</td></tr><tr><td>d</td><td>删除指定的行</td></tr><tr><td>s</td><td>字串替换，格式：“行范围s/旧字符串/新字符串/g”</td></tr><tr><td>r</td><td>读取指定文件</td></tr><tr><td>w</td><td>保存为文件</td></tr><tr><td>i</td><td>插入，在当前行前面插入一行或多行</td></tr></tbody></table><h3 id="2-用法实例"><a href="#2-用法实例" class="headerlink" title="2.用法实例"></a>2.用法实例</h3><p><strong>打印</strong></p><p>打印出passwd中以bash结尾的内容 </p><pre><code> sed -n &#39;/bash$/p&#39; passwd // 其中参数-n仅显示script处理后的结果 $是匹配字符串的结束 p是sed中的打印</code></pre><p>打印出passwd中以r开头的内容 </p><pre><code> sed -n &#39;/^r/p&#39; passwd  // 其中参数-n仅显示script处理后的结果 ^是匹配字符串的开始 p是sed中的打印</code></pre><p>打印passwd中3-8行的内容 </p><pre><code>sed -n &#39;3,8p&#39; passwd  // 其中参数-n仅显示script处理后的结果  3,8是表示范围  p是sed中的打印</code></pre><p>打印passwd中的每一行 到第五行退出 </p><pre><code> sed  &#39;5q&#39; passwd</code></pre><p><strong>删除</strong></p><p>删除passwd中以kute开头的内容 </p><pre><code>  sed -i &#39;/^kute/d&#39; passwd  // 其中参数-i为直接编辑文件 ^是匹配字符串的开始 d是sed的删除命令</code></pre><p>删除passwd中包含docker内容的行 </p><pre><code>  sed -i &#39;/docker/d&#39; passwd  // 其中参数-i为直接编辑文件 d是sed的删除命令</code></pre><p>删除passwd中第三行的首个字符d </p><pre><code> sed -i &#39;3s/^d//&#39; passwd  // 将首个字符设置为空 以达到删除字符的目的</code></pre><p>删除passwd中第三行的首个字符d</p><pre><code> sed -ri &#39;3s/d(.*)/\1/&#39; passwd  // 截取除首个字母之外的所有字符  以达到删除字符的目的</code></pre><p>删除passwd中第三行的最后一个字符n </p><pre><code> sed -ri &#39;1s/(.*)n$/\1/&#39; passwd  // 截取除了最后一个字母之外的所有字符 以达到删除字符的目的</code></pre><p>删除passwd中第三行的最后一个字符n </p><pre><code>sed -i &#39;3s/n$//&#39; passwd  // 将最后一个字符设置为空 以达到删除字符的目的</code></pre><p><strong>截取</strong></p><p>将passwd中所有的nologin全部替换成hhh </p><pre><code>  sed -nr &#39;/bash$/s/(.*):\w:[0-9]+:[0-9]+:.*:(.*):.*/\1 \2/p&#39; passwd  // -r 相当于转义字符 s替换指定内容 （）截取的内容 \w 匹配字母、数字、下划线或汉字 + 重复一次或更多次 \1 自动命名的组</code></pre><p><strong>替换</strong></p><p>将passwd中所有的nologin全部替换成hhh </p><pre><code> sed -i &#39;s/nologin/hhh/g&#39; passwd  // s//需要替换的内容 /g 全面替换标记</code></pre><p>将passwd中1-9行的nologin全部替换成hhh </p><pre><code> sed -i &#39;1,9s/nologin/hhh/g&#39; passwd  // 1,9s//需要替换的内容 /g 全面替换标记</code></pre><p><strong>插入</strong></p><p>在passwd中第五行上插入内容 </p><pre><code> sed -i &#39;5i\hello&#39; passwd  // i\ 在当前行上面插入文本</code></pre><p>在passwd中第6行下追加内容 </p><pre><code>sed -i &#39;6a\hello&#39; passwd  // a\ 在当前行下面插入文本</code></pre><p>将passwd第五行修改为hello world </p><pre><code> sed -i &#39;5c\hello world&#39; passwd  // c\ 把选定的行改为新的文本</code></pre><p>在passwd每一行的行首添加字符# </p><pre><code>sed -i &#39;s/^/#&amp;/g&#39; passwd  // &amp; 已匹配字符串标记</code></pre><p>在passwd1-5行的行首添加字符# </p><pre><code>sed -i &#39;1,5s/^/#&amp;/&#39; passwd  // 1,5s 在1-5行操作</code></pre><p>在passwd中每一行的最后添加# </p><pre><code>sed -i &#39;s/$/&amp;#/g&#39; passwd  // $匹配字符串的最后 &amp;已匹配字符串标记</code></pre><p>在passwd最后一行后插入一行 </p><pre><code>sed -i &#39;$a\qyeyeyowowo&#39; passwd  // $匹配最后  a\ 在当前行下面插入文本</code></pre><p>在passwd第一行前面插入一行 </p><pre><code>sed -i &#39;1i\qyeyeyowowo&#39; passwd  // 1i\ 第一行的上面追加新的文本</code></pre><p><strong>转换</strong></p><p>将字符串中的abcde转换为12345 </p><pre><code>  sed -i &#39;y/abcde/12345/&#39; file  // y表示把一个字符翻译为另外的字符（但是不用于正则表达式）</code></pre><h2 id="二-awk工具介绍"><a href="#二-awk工具介绍" class="headerlink" title="二.awk工具介绍"></a>二.awk工具介绍</h2><p>​    Awk是一个功能强大的编辑工具，用于在Linux/UNIX下对文本和数据进行处理。数据可以来自一个或多个文件，也可以为其他命令的输出，常作为脚本来使用。在执行操作时，Awk逐行读取文本，默认以空格为分隔符进行分隔，将分隔所得的各个字段保存到内建变量中，对比该行是否与给定的模式相匹配，并按模式或者条件执行编辑命令，也可从脚本中调用编辑指令过滤输出相应内容。</p><h3 id="1-awk基本语法"><a href="#1-awk基本语法" class="headerlink" title="1.awk基本语法"></a>1.awk基本语法</h3><p>Awk的两种语法格式:<br>awk[选项] ‘模式或条件 {编辑指令}’ 文件1文件2<br>awk -f 脚本文件 文件1文件2</p><p>​    在Awk语句中，模式部分决定何时对数据进行操作，若省略则后续动作时刻保持执行状态，模式可以为条件语句、复合语句或正则表达式等。每条编辑指令可以包含多条语句，多条语句之间要使用分号或者空格分隔的多个区域。常用选项F定义字段分隔符，默认以空格或者制表符作为分隔符。</p><p>​    Awk提供了很多内置变量，经常用于处理文本，了解这些内置变量的使用是很有必要的，如表所示：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>FS</td><td>指定每行文本的字段分隔符，缺省为空格或制表位</td></tr><tr><td>NF</td><td>当前处理的行的字段个数</td></tr><tr><td>NR</td><td>当前处理的行的行号(序数)</td></tr><tr><td>$0</td><td>当前处理的行的整行内容</td></tr><tr><td>$n</td><td>当前处理行的第n个字段(第n列)</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell编写</title>
      <link href="/2019/09/18/shell-bian-xie/"/>
      <url>/2019/09/18/shell-bian-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell编程之条件语句"><a href="#Shell编程之条件语句" class="headerlink" title="Shell编程之条件语句"></a>Shell编程之条件语句</h1><h2 id="一-条件测试"><a href="#一-条件测试" class="headerlink" title="一.条件测试"></a>一.条件测试</h2><p>​    使用shell脚本程序具备一定的“智能”，面临的第一个问题就是如何区分不同的情况以确定执行何种操作。例如，当磁盘使用率超过95%时发送警告信息；当备份目录存在时能够自动创建；当源码编译程序时若配置失败则不再继续安装等。<br>    shell环境根据命令执行后的返回状态（$?）来判断是否执行成功，当返回0时表示成功，当返回1时表示失败或异常。使用专门的测试工具—test命令，可以对特定条件进行测试，并根据返回值来判断是否成立。</p><p>test命令的使用：test 条件表达式   或  [ 条件表达式 ]<br>这两种方式的作用完全相同，但通常后一种形式更为常用，也更贴近编程习惯。需要注意的是，方括号与条件表达式之间需要至少一个空格进行分隔。</p><p>根据需要测试的条件类别不同，条件表达式也不同。比较常用的条件操作包括文件测试、整数值比较、字符串比较、以及针对多个条件的逻辑测试。</p><h3 id="1-文件测试"><a href="#1-文件测试" class="headerlink" title="1.文件测试"></a>1.文件测试</h3><p>文件测试指的是根据给定的路径名称，判断对应的是文件还是目录，或者判断文件是否可读、可写、可执行等。文件测试的常见操作选项如下，使用时将测试对象放在操作选项之后即可。</p><p> -d 测试是否为目录（Directory）<br> -e 测试目录或文件是否存在（Exist)<br> -f 测试是否为文件(File)<br> -r 测试当前用户是否有权限读取(Read)<br> -w 测试当前用户是否有权限写入(Write)<br> -x 测试是否设置有可执行（Excute）权限</p><p>举例：判断/mnt/cdrom目录是否存在？</p><pre><code>#test -e /mnt/cdrom#echo $?0</code></pre><p>举例：判断/mnt/cdrom是不是目录？</p><pre><code>#test -d /mnt/cdrom#echo $?0</code></pre><p>或</p><pre><code>#[ -d /mnt/cdrom ]#echo $?0</code></pre><p>通过查看变量“$?”变量的值可以判断前一步的条件测试结果，但是操作比较繁锁，输出结果也不直观。为了更直观地查看测试结果，可以像以下举例来实现：<br>举例：#[ -d /media/cdrom ]&amp;&amp;echo “YES”<br>                         //无输出表示该目录不存在<br>         YES             //输出“YES”表示该目录存在<br>举例：[ -d /media/cdrom ]&amp;&amp;echo “YES” || echo “NO”<br>使用[[ 条件表达式 ]]也可以进行条件测试<br>举例：[[ -d /media/cdrom ]]&amp;&amp;echo “YES” || echo “NO”</p><p>test命令中用于判断文件的选项有很多，从文件个数上可分为单个文件的判断和两个文件之间的比较。其中判断单个文件最常用的选项就-f选项，在比较两个文件时，常用的选项有：<br>-nt 判断文件A是否比文件B新<br>-ot 判断文件A是否比文件B旧<br>-ef 判断两个文件是否为同一个文件，用来判断两个文件是否指向同一个inode</p><p>举例：</p><pre><code>#touch a#touch b#test a -ot b&amp;&amp;echo “YES” || echo “NO”#test a -ef b &amp;&amp;echo “YES” || echo “NO”#ln a c  In创造一个链接#test a -ef c &amp;&amp;echo “YES” || echo “NO”</code></pre><h3 id="2-整数值比较"><a href="#2-整数值比较" class="headerlink" title="2.整数值比较"></a>2.整数值比较</h3><p>整数值比较指的是根据给定的两个整数值，判断第一个数与第二个数的关系，如是否是大于、等于、小于第二个数。整数值比较的常用操作选项如下：<br>-eq   a等于b<br>-ne   a不等于b<br>-gt   a大于b<br>-lt   a小于b<br>-le   a小于或等于b<br>-ge   a大于或等于b</p><p>整数值比较在shell脚本编写中的应用较多，例如用来判断已登录用户数量、开启进程数、磁盘使用率是否超标，以及软件版本号是否符合要求等。实际使用时，往往会通过变量引用、命令替换等方式来获取一个数值。<br>举例：判断当前已登录用户数，当超过5个时输出“Too many”<br>Unum=’who | wc -l’<br>[ $Unum -gt 5 ]&amp;&amp;echo “too many.”<br>too many</p><p>举例：判断当前可用的空闲内存（free)大小，当低于1024MB时输出具体数值</p><pre><code>#FreeCC=$(free -m|grep Mem|awk &#39;{print $4}&#39;)</code></pre><pre><code>#[ $FreeCC -lt 1024 ]&amp;&amp;echo ${FreeCC}MB</code></pre><h3 id="3-字符串比较"><a href="#3-字符串比较" class="headerlink" title="3.字符串比较"></a>3.字符串比较</h3><p>​    字符串比较通常用来检查用户输入、系统环境等是否满足条件，在提供交互式操作的shell脚本中，也可用来判断用户输入的位置参数是否符合要求。字符串比较常用的操作选项如下：<br>=     第一个字符串与第二个字符串相同<br>！=   第一个字符串与第二个字符串不相同<br>-z    检查字符串是否为空（zero),对于未定义或赋予空值的变量将视为空串</p><p>举例：判断当前系统的语言环境，不是en.US时输出“Not en.US”</p><pre><code># echo $LANGzh_CN.UTF-8# [ $LANG != &quot;en.US&quot; ]&amp;&amp;echo &quot;Not en.US&quot;Not en.US</code></pre><p>举例：在shell脚本应用中，经常需要用户输入yes或no来确认某个任务，以下举例<br>可以作为展示，实际使用时还会根据变量“ACK”的取值分别执行进一步的操作。</p><pre><code># read -p &quot;是否覆盖现有文件（yes/no)?&quot; ACK是否覆盖现有文件（yes/no)?yes# echo $ACKyes# [ $ACK=&quot;yes&quot; ]&amp;&amp;echo &quot;覆盖&quot;# read -p &quot;是否覆盖现有文件（yes/no)?&quot; ACK是否覆盖现有文件（yes/no)?no# [ $ACK=&quot;no&quot; ]&amp;&amp;echo &quot;不覆盖&quot;不覆盖</code></pre><h3 id="4-逻辑测试"><a href="#4-逻辑测试" class="headerlink" title="4.逻辑测试"></a>4.逻辑测试</h3><p>逻辑测试指的是判断两个或多个条件之间的依赖关系。当系统任务取决于多个不同的条件时，判断是根据这些条件同时成立还是只要有其中一个成立等情况，需要有一个测试的过程，常用的逻辑测试操作如下，使用时放在不同的测试语句或命令之间。<br>    &amp;&amp;   逻辑与，表示而且，只有当前后两个条件都成立时，整个测试的命令返回值才为0（结果成立）。使用test命令测试时可改为-a<br>    ||   逻辑或，表示或者，只要前后两个条件有一个成立，则整个测试的命令返回值为0（结果成立）。使用test命令测试时可改为-o<br>    !:   逻辑否，表示不，只有当指定的条件不成立时，整个测试命令的返回值才为0（结果成立）<br>举例：判断Linux系统的内核版本是否大于2.4</p><pre><code># Mnum=$(uname -r|awk -F. &#39;{print $1}&#39;)# Snum=$(uname -r|awk -F. &#39;{print $2}&#39;)# [ $Misplaced &amp;Mnum -eq 2 ]&amp;&amp;[$Snum -gt 4]&amp;&amp;echo &quot;yes&quot; || echo &quot;no&quot;# [ $Misplaced &amp;Mnum -eq 2 ]&amp;&amp;[$Snum -gt 4]&amp;&amp;echo &quot;yes&quot; || echo &quot;no&quot;# [ $Mnum -gt 2 ]||`[ $Mnum -eq 2 ]&amp;&amp;[$Snum -gt 4]`&amp;&amp;echo &quot;yes&quot; || echo &quot;no&quot;</code></pre><pre><code>[root@localhost ~]# test $Mnum -eq 3 -a $Snum -gt 4[root@localhost ~]# echo $?0[root@localhost ~]# test $Mnum -eq 2 -a $Snum -gt 4[root@localhost ~]# echo $?1</code></pre><h2 id="二-if语句结构"><a href="#二-if语句结构" class="headerlink" title="二.if语句结构"></a>二.if语句结构</h2><p>​    在shell脚本应用中，if语句是最为常用的一种流程控制方式，用来根据特定的条件测试结果，分别执行不同的操作（如果….那么….)。根据不同的复杂程度，if语句的选择结构可以分为三种基本类型，适用于不同的应用场合。</p><h3 id="1-单分支的if语句"><a href="#1-单分支的if语句" class="headerlink" title="1.单分支的if语句"></a>1.单分支的if语句</h3><p>只有在条件成立时才会执行相应的代码，否则不执行任何操作。<br>   语法格式：<br>      if 条件测试语句<br>      then<br>         命令序列<br>      fi</p><p>举例：使用shell脚本挂载光盘   </p><pre><code># !/bin/bashMOUNT_DIR=&quot;/mnt/cdrom&quot;if [ ! -d $MOUNT_DIR ]then  mkdir -p $MOUNT_DIR  mount /dev/sr0 $MOUNT_DIRelse  echo -e &quot;\033[31m /dev/sr0 mounted on /mnt/cdrom!\033[0m&quot;fi</code></pre><pre><code>#chmod +x moutcd.sh# ./moutcd.sh</code></pre><p>举例：有些特权命令要求root用户执行，如果当前用户不是root，那么就提示权限不足。</p><pre><code># !/bin/bashif [ &quot;$USER&quot; != &quot;root&quot; ]then    echo -e &quot;\033[31m 错误：非root用户，权限不足！\033[0m&quot;    exit 1fi#fdisk -l /dev/sda</code></pre><h3 id="2-双分支的if语句"><a href="#2-双分支的if语句" class="headerlink" title="2.双分支的if语句"></a>2.双分支的if语句</h3><p>针对条件成立和条件不成立两种情况分别执行不同的操作。<br>语法格式：<br>     if 条件测试语句<br>      then<br>         命令序列1<br>      else<br>         命令序列2<br>      fi</p><p>举例：使用shell脚本测试主机是否开启</p><pre><code># !/bin/bashping -c 3 -i 0.2 -w 3 $1 &amp;&gt;/dev/nullif [ $? -eq 0 ]then  echo &quot;Host $1 is up!&quot;else  echo &quot;Host $1 is down!&quot;fi</code></pre><pre><code># ./pinghost.sh 192.168.75.1Host 192.168.75.1 is up!</code></pre><pre><code> 举例： 通过shell命令检查vsftpd服务是否运行，如果已经运行则列出其监听地址、PID号，否则输出“警告：vsftpd服务不可用”，其中pgrep -x表示精确匹配。</code></pre><pre><code># !/bin/bash/usr/bin/systemctl status vsftpd &amp;&gt;/dev/nullif [ $? -eq 0 ]then   echo &quot;监听地址：$(netstat -anpt | grep vsftpd | awk &#39;{print $4}&#39;)&quot;   echo &quot;进程PID号：$(pgrep -x vsftpd)&quot;else   echo &quot;警告:vsftpd服务不可用!&quot;fi</code></pre><pre><code># chmod +x chkftpd.sh# ./chkftpd.sh监听地址：:::21进程PID号：102825</code></pre><h3 id="3-多分支的if语句"><a href="#3-多分支的if语句" class="headerlink" title="3.多分支的if语句"></a>3.多分支的if语句</h3><p>与单分支、双分支的if语句相比，多分支if语句的实际应用并不多见。由于if语句可以根据测试结果的成立、不成立分别执行操作，所以能够嵌套使用，进行多次判断。<br>语法格式：<br>     if 条件测试操作1<br>      then<br>         命令序列1<br>      elif 条件测试操作2<br>then<br>         命令序列2<br>      eles<br>         命令序列3<br>      fi</p>]]></content>
      
      
      
        <tags>
            
            <tag> 系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firewall防火墙</title>
      <link href="/2019/09/16/firewall-fang-huo-qiang/"/>
      <url>/2019/09/16/firewall-fang-huo-qiang/</url>
      
        <content type="html"><![CDATA[<p>​    firewalld防火墙是CentOS7版本系统默认的防火墙管理工具，取代了之前的iptables防火墙，与iptables防火墙一样也属于典型的包过滤防火墙或称之为网络层防火墙，firewalld和iptables都是用来管理防火墙的工具（属于用户态）来定义防火墙的各种规则功能，内部结构都指向netfilter这一强大的网络过滤子系统（属于内核态）以实现包过滤防火墙功能。firewalld防火墙最大的优点在于支持动态更新以及加入了防火墙的“Zone”概念，firewalld防火墙支持IPV4和IPV6地址。可以通过字符管理工具firewall-cmd和图形化管理工具firewall-config进行管理。</p><h2 id="一-区域的概念"><a href="#一-区域的概念" class="headerlink" title="一.区域的概念"></a>一.区域的概念</h2><p>​    firewalld防火墙为了简化管理，将所有网络流量分为多个区域（zone）。然后要所数据包的源IP地址或传入的网络接口条件等将流量传入相应区域。每个区域都定义了自己打开或关闭的端口服务列表。其中默认区域为public区域，trusted区域默认允许所有流量通过，是一个特殊的区域。</p><table><thead><tr><th align="left"><strong>区域名称</strong></th><th><strong>默认配置说明</strong></th></tr></thead><tbody><tr><td align="left">Trusted</td><td>允许所有的传入流量</td></tr><tr><td align="left">Home</td><td>允许与ssh、mdns、ipp-client、samba-client或dhcpv6-client预定义服务匹配的传入流量，其余均拒绝</td></tr><tr><td align="left">Internal</td><td>默认值时与home区域相同</td></tr><tr><td align="left">Work</td><td>允许与ssh、ipp-client或dhcpv6-client预定义服务匹配的传入流量，其余均拒绝</td></tr><tr><td align="left">Public</td><td>允许与ssh或dhcpv6-client预定义服务匹配的传入流量，其余均拒绝。是新添加网络接口的默认区域。</td></tr><tr><td align="left">External</td><td>允许与ssh预定义服务匹配的传入流量，其余均拒绝。默认将经过此区域转发的IPv4地址传出流量进行地址伪装。</td></tr><tr><td align="left">Dmz</td><td>允许与ssh预定义服务匹配的传入流量，其余均拒绝。</td></tr><tr><td align="left">Block</td><td>拒绝所有传入流量</td></tr><tr><td align="left">Drop</td><td>丢弃所有传入流量</td></tr></tbody></table><p>​    用户可以根据具体环境选择使用区域。管理员也可以对这些区域进行自定义，使其具有不同的设置规则。</p><p>​    在流量经过防火墙时，firewalld防火墙会对传入的每个数据包进行检查，如果此数据包的源地址关联到特定的区域，则会应用该区域的规则对此数据包进行处理，如果该源地址没有关联到任何区域，则将使用传入网络接口所在的区域规则进行处理。如果流量与不允许的端口、协议或者服务匹配，则防火墙拒绝传入流量。</p><h2 id="二-字符管理工具"><a href="#二-字符管理工具" class="headerlink" title="二.字符管理工具"></a>二.字符管理工具</h2><p>​    firewall-cmd是firewalld防火墙自带的字符管理工具，可以用来设置firewalld防火墙的各种规则，需要注意的是firewalld防火墙规则分为两种状态，一种是runtime(正在运行生效的状态），在runtime状态添加新的防火墙规则，这些规则会立即生效，但是重新加载防火墙配置或者重启系统后这些规则将会失效；一种是permanent（永久生效的状态），在permanent状态添加新的防火墙规则，这些规则不会马上生效，需要重新加载防火墙配置或者重启系统后生效。</p><p>​    在使用firewall-cmd命令管理防火墙时，需要添加为永久生效的规则需要在配置规则时添加–permanent选项（否则所有命令都是作用于runtime，运行时配置）,如果让永久生效规则立即覆盖当前规则生效使用，还需要使用firewall-cmd –reload命令重新加载防火墙配置。常用firewall-cmd命令如下：</p><table><thead><tr><th><strong>firewall-cmd命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>–get-default-zone</td><td>查看当前默认区域</td></tr><tr><td>–get-active-zones</td><td>列出当前正在使用的区域及其所对应的网卡接口</td></tr><tr><td>–get-zones</td><td>列出所有可用的区域</td></tr><tr><td>–set-default-zone=<zone></zone></td><td>设置默认区域（注意此命令会同时修改运行时配置和永久配置）</td></tr><tr><td>–add-source=<cidr>[–zone=<zone>]</zone></cidr></td><td>将来自IP地址或网段的所有流量路由到指定区域，没有指定区域时使用默认区域。</td></tr><tr><td>–remove-source=<cidr>[–zone=&lt;ZONE]</cidr></td><td>从指定区域中删除来自IP地址或网段的所有路由流量规则，没有指定区域时使用默认区域。</td></tr><tr><td>–add-interface=<interface>[–zone=&lt;ZONE]</interface></td><td>将来自该接口的所有流量都路由到指定区域。没有指定区域时使用默认区域。</td></tr><tr><td>–change-interface=<interface>[–zone=&lt;ZONE]</interface></td><td>将接口与指定区域做关联，没有指定区域时使用默认区域。</td></tr><tr><td>–list-all[–zone=&lt;ZONE]</td><td>列出指定区域已配置接口、源、服务、端口等信息，没有指定区域时使用默认区域。</td></tr><tr><td>–add-service=<service>[–zone=&lt;ZONE]</service></td><td>允许到该服务的流量通过指定区域，没有指定区域时使用默认区域。</td></tr><tr><td>–remove-service=<service>[–zone=&lt;ZONE]</service></td><td>从指定区域的允许列表中删除该服务，没有指定区域时使用默认区域。</td></tr><tr><td>–add-port=&lt;PORT/PROTOCOL&gt;[–zone=&lt;ZONE]</td><td>允许到该端口的流量通过指定区域，没有指定区域时使用默认区域。</td></tr><tr><td>–remove-port=&lt;PORT/PROTOCOL&gt;[–zone=&lt;ZONE]</td><td>从指定区域的允许列表中删除该端口，没有指定区域时使用默认区域。</td></tr></tbody></table><h3 id="1-区域管理"><a href="#1-区域管理" class="headerlink" title="1.区域管理"></a>1.区域管理</h3><p>firewall-cmd –help | wc -l<br>(1)查看默认区域</p><p>firewall-cmd –get-default-zone</p><p>(2)列出当前正在使用的区域及其所对应的网卡接口</p><p>firewall-cmd –get-active-zones</p><p>(3)列出所有可用的区域</p><p>firewall-cmd –get-zones</p><p>(4)设置默认区域</p><p>firewall-cmd –set-default-zone=block</p><h3 id="2-服务管理"><a href="#2-服务管理" class="headerlink" title="2.服务管理"></a>2.服务管理</h3><p>（1）查看预定义服务</p><p>firewall-cmd –get-services</p><p>（2）添加http服务到public区域</p><p>firewall-cmd –add-service=http –zone=public –permanent</p><p>systemctl restart firewalld</p><p>（3）查看public区域已配置的规则</p><p>firewall-cmd –list-all –zone=public</p><p>（4）移除public区域的http服务，不使用–zone指定区域时使用默认区域</p><p>firewall-cmd –remove-service=http –permanent –zone=public</p><p>systemctl restart firewalld</p><p>（5）将多个服务添加到某一个区域，不添加–permanent选项表示是即时生效的临时设置</p><p>firewall-cmd –add-service=http –add-service=https</p><p>systemctl restart firewalld</p><h3 id="3-端口管理"><a href="#3-端口管理" class="headerlink" title="3.端口管理"></a>3.端口管理</h3><p>(1)允许TCP的3306端口到public区域<br>firewall-cmd –add-port=3306/tcp<br>(2)从public区域将TCP的3306端口移除<br>firewall-cmd –remove-port=3306/tcp<br>(3)允许某一范围的端口，如允许UDP的2048-2050端口到public区域<br>firewall-cmd –add-port=2048-2050/udp –zone=public<br>(4)使用–list-ports查看加入的端口操作是否成功<br>firewall-cmd –list-ports</p><h3 id="4-伪装IP"><a href="#4-伪装IP" class="headerlink" title="4.伪装IP"></a>4.伪装IP</h3><p>（1）什么是地址伪装？<br>通过地址伪装，NAT设备将经过设备的包转发到指定的接收方，同时将通过的数据包源地址更改为其NAT设备自己的接口地址。当返回的数据包到达时，会将目的地址修改为原始主机的地址并做路由。地址伪装可以实现局域网多个地址共享单一公网地址上网。类似于NAT技术中的端口多路复用（PAT）。IP地址伪装仅支ipv4，不支持ipv6。</p><p>（2）相关命令<br>firewall-cmd –query-masquerade # 检查是否允许伪装IP<br>firewall-cmd –permanent –add-masquerade # 允许防火墙伪装IP<br>firewall-cmd –permanent –remove-masquerade# 禁止防火墙伪装IP</p><h3 id="5-端口转发"><a href="#5-端口转发" class="headerlink" title="5.端口转发"></a>5.端口转发</h3><p>当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。<br>firewall-cmd –permanent –add-masquerade<br>firewall-cmd –add-forward-port=port=8080:proto=tcp:toport=80<br>firewall-cmd –add-port=8080/tcp<br>firewall-cmd –remove-service=http</p><p>端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。</p><h3 id="6-多区域的应用"><a href="#6-多区域的应用" class="headerlink" title="6.多区域的应用"></a>6.多区域的应用</h3><p>(1)一个接口只能对应一个区域，将接口与指定区域关联<br>firewall-cmd –change-interface=ens75 –zone=drop<br>(2)根据不同的访问来源网段，设定至不同的区域规则<br>firewall-cmd –add-source=192.168.75.0/24 –zone=public<br>firewall-cmd –add-source=192.168.85.0/24 –zone=drop<br>firewall-cmd –get-active-zones<br>(3)建议配置方案<br>将所有接口划分到对应的区域，<br>根据网段配置至不同的区域，<br>不同的区域配置不同的规则。</p><p>(4)检查防火墙设置<br>firewall-cmd –get-active-zones<br>firewall-cmd –list-all –zone=drop</p>]]></content>
      
      
      
        <tags>
            
            <tag> 系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传绕过</title>
      <link href="/2019/08/27/shang-chuan-rao-guo/"/>
      <url>/2019/08/27/shang-chuan-rao-guo/</url>
      
        <content type="html"><![CDATA[<h4 id="上传漏洞过滤机制部分整理："><a href="#上传漏洞过滤机制部分整理：" class="headerlink" title="上传漏洞过滤机制部分整理："></a><strong>上传漏洞过滤机制部分整理：</strong></h4><p><strong>1.</strong>$deny_ext = array();<br>//array()用于创建数组,通过匹配给定的字符，达到过滤的作用</p><p>2.$file_name = trim($_FILES[‘upload_file’][‘name’]);<br>//trim()用于去掉字符串两端的多余的空格</p><p>3.$file_name = deldot($file_name);<br> //删除文件名末尾的点</p><p>4.$file_ext = strrchr($file_name, ‘.’);<br>//搜索 “.” 在字符串中的位置，并返回从该位置到字符串结尾的所有字符</p><p>5.$file_ext = strtolower($file_ext);<br>//转换为小写</p><p>6.$file_ext = trim($file_ext);<br>//收尾去空</p><p>7.$file_ext = str_ireplace(‘::$DATA’, ‘’, $file_ext);<br>//去除字符串::$DATA</p><p>采用Windows文件流特性,必须是windows, 必须是php, 必须是那个源文件 php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名,目的就是不检查后缀名</p>]]></content>
      
      
      
        <tags>
            
            <tag> 上传绕过技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略路由</title>
      <link href="/2019/08/20/ce-lue-lu-you/"/>
      <url>/2019/08/20/ce-lue-lu-you/</url>
      
        <content type="html"><![CDATA[<p><strong>策略路由</strong></p><p>策略路由提供了一种根据网络管理者制定的策略来进行数据包转发的机制。基于策略的路由比传统路由能力更强，使用更灵活，它使用网络管理者不仅能够根据目的地址，而且能够根据协议类型、报文大小、应用或IP源地址来选择转发路径。策略由路由映射表来定义。</p><h2 id="实验一、基于源IP地址的策略路由配置"><a href="#实验一、基于源IP地址的策略路由配置" class="headerlink" title="实验一、基于源IP地址的策略路由配置"></a><strong>实验一、基于源IP地址的策略路由配置</strong></h2><p><strong>实验目的：</strong></p><p>1、用route-map定义路由策略。</p><p>2、在接口下应用路由策略。</p><p>3、基于源IP地址的策略路由的配置和调试。</p><p><strong>实验拓朴：</strong></p><p><img src="https://s2.ax1x.com/2019/08/21/mNbcmF.jpg" alt></p><p><strong>实验步骤：</strong></p><p>在路由器R1的f0/0接口应用IP策略路由CCNA，使得从主机PC2来的数据设置一跳地址为：172.16.12.2；从主机PC3来的数据设置下一跳地址为：172.16.21.2，所有其他的数据包正常转发，整个网络运行EIGRP路由协议。</p><p><strong>配置ACL</strong></p><p>R1(config)#access-list 1 permit 172.16.1.2</p><p>R1(config)#access-list 2 permit 172.16.1.3</p><p><strong>配置路由映射表</strong></p><p>R1(config)#route-map CCNA permit 10</p><p>R1(config-route-map)#match ip address 1</p><p>R1(config-route-map)#set ip next-hop 172.16.12.2</p><p>R1(config-route-map)#exit</p><p>R1(config)#route-map CCNA permit 20</p><p>R1(config-route-map)#match ip address 2</p><p>R1(config-route-map)#set ip next-hop 172.16.21.2</p><p><strong>应用策略路由</strong></p><p>R1(config)#int f0/0</p><p>R1(config-if)#ip policy route-map CCNA</p><p><strong>实验调试：</strong></p><p>1、<strong>查看路由路径</strong></p><p>PC2#traceroute 172.16.2.2</p><p>PC3#traceroute 172.16.2.2</p><p>2、<strong>在R1上显示调试信息</strong></p><p>R1#debug ip policy</p><p>PC2：ping 172.16.2.2  </p><p>PC6:ping 172.16.2.2</p><p><strong>3、显示在哪些接口上应用了策略路由</strong></p><p>R1#sh ip policy</p><p><strong>4、显示定义的所有路由策略及路由策略匹配的情况</strong></p><h2 id="实验二、基于数据包长度的策略路由配置"><a href="#实验二、基于数据包长度的策略路由配置" class="headerlink" title="实验二、基于数据包长度的策略路由配置"></a><strong>实验二、基于数据包长度的策略路由配置</strong></h2><p><strong>实验目的：</strong></p><p>1、用route-map定义路由策略。</p><p>2、在接口下应用路由策略。</p><p>3、基于数据包长度的策略路由的配置和调试。</p><p><strong>实验拓朴：</strong></p><p><img src="https://s2.ax1x.com/2019/08/21/mNbqTH.jpg" alt> </p><p><strong>实验步骤：</strong></p><p>在R1的f0/0接口应用IP策略路由CCNP，使得对大小为“64-100”字节的数据包设置出接口为s1/0;数据包大小“101-100”字节的数据包设置出接口为“f0/1”,所有其他的数据包正常转发，整个网络运行EIGRP路由协议。</p><p><strong>配置路由映射表</strong></p><p>R1(config)#route-map CCNP permit 10</p><p>R1(config-route-map)#match length 64 100</p><p>R1(config-route-map)#set interface s1/0</p><p>R1(config)#route-map CCNP permit 20</p><p>R1(config-route-map)#match length 101 1000</p><p>R1(config-route-map)#set interface f0/1</p><p><strong>应用策略路由</strong></p><p>R1(config)#int f0/0</p><p>R1(config-if)#ip policy route-map CCNP</p><p>R1(config-if)#exit</p><p>R1(config)#ip local policy route-map CCNP</p><p><strong>实验调试：</strong></p><p><strong>1.在主机上执行扩展ping命令，在R1上显示调试信息。</strong></p><p>PC2：ping 172.16.2.2 repeat 1 size 90</p><p>PC2：ping 172.16.2.2 repeat 1 size 300</p><p>PC2：ping 172.16.2.2 repeat 1 size 1200</p><p><strong>2、**</strong>显示在哪些接口上应用了策略路由**</p><p>R1#sh ip policy</p><p><strong>3、显示定义的所有路由策略及路由策略匹配的情况</strong></p><p>R1#sh route-map CCNP</p><h2 id="实验三、基于应用的策略路由配置"><a href="#实验三、基于应用的策略路由配置" class="headerlink" title="实验三、基于应用的策略路由配置"></a><strong>实验三、基于应用的策略路由配置</strong></h2><p><strong>实验目的：</strong></p><p>1、用route-map定义路由策略。</p><p>2、在接口下应用路由策略。</p><p>3、基于数据包长度的策略路由的配置和调试。</p><p><strong>实验拓朴：</strong></p><p><img src="https://s2.ax1x.com/2019/08/21/mNqpX8.jpg" alt></p><p><strong>实验步骤：</strong></p><p>在R1的f0/0接口应用IP策略路由CCIE，使得对HTTP数据包设置一跳地址为：172.16.12.2，并且设置IP数据包优先级为”flash”,为telnet数据包设置下一跳地址为：172.16.21.2，并且设置IP数据包优先级为：critical，所有其他的数据包正常转发，整个路由协议运行EIGRP。</p><p><strong>配置R2的http与telnet访问</strong></p><p>  R2(config)#ip http server</p><p>R2(config)#line vty 0 4</p><p>R2(config-line)#no login</p><p>R2(config-line)#privilege level 15</p><p><strong>配置扩展ACL</strong></p><p>R1(config)#ip access-list extended HTTP</p><p>R1(config-ext-nacl)#permit tcp any any eq 80</p><p>R1(config-ext-nacl)#exit</p><p>R1(config)#ip access-list extended TELNET</p><p>R1(config-ext-nacl)#permit tcp any any eq 23</p><p><strong>配置路由映射表</strong></p><p>R1(config)#route-map CCIE permit 10</p><p>R1(config-route-map)#match ip address HTTP</p><p>R1(config-route-map)#set ip precedence flash</p><p>R1(config-route-map)#set ip next-hop 172.16.12.2</p><p>R1(config)#route-map CCIE permit 20</p><p>R1(config-route-map)#match ip address TELNET</p><p>R1(config-route-map)#set ip precedence critical</p><p>R1(config-route-map)#set ip next-hop 172.16.21.2</p><p><strong>应用路由映射表</strong></p><p>R1(config)#int f0/0</p><p>R1(config-if)#ip policy route-map CCIE</p><p>R1(config)#ip local policy route-map CCIE</p>]]></content>
      
      
      
        <tags>
            
            <tag> 路由协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP地址分类</title>
      <link href="/2019/08/20/ip-di-zhi-fen-lei/"/>
      <url>/2019/08/20/ip-di-zhi-fen-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="IP地址介绍及VLSM"><a href="#IP地址介绍及VLSM" class="headerlink" title="IP地址介绍及VLSM"></a>IP地址介绍及VLSM</h1><h2 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h2><h3 id="A类网络地址范围"><a href="#A类网络地址范围" class="headerlink" title="A类网络地址范围"></a><strong>A类网络地址范围</strong></h3><p>第一个字节的第一位必须为0，第一个字节的取值为0-127</p><p>即: 0xxxxxxx        取值范围是:  0000000-01111111 (0-127)</p><p>1.1.1.1/8        网络号: 8位        255.0.0.0</p><p>网络地址：1.0.0.0</p><p>广播地址：1.255.255.255</p><p>在这网络中有多少个地址呢？2^24</p><p>有效地址：2^24-2</p><h3 id="B类网络地址范围"><a href="#B类网络地址范围" class="headerlink" title="B类网络地址范围"></a><strong>B类网络地址范围</strong></h3><p>第一个字节的第一位必须是1，且第二位必须是0，第一个字节的取值为128-191</p><p>即：10000000   取值范围是：10000000－10111111 (128-191)</p><p>181.1.1.1/16   255.255.0.0</p><p>网络地址：181.1.0.0</p><p>广播地址：181.1.255.255</p><p>有效地址：2^16-2</p><h3 id="C类网络的地址范围"><a href="#C类网络的地址范围" class="headerlink" title="C类网络的地址范围"></a><strong>C类网络的地址范围</strong></h3><p>第一个字节的前两位必须是1，且第三位必须是0，第一个字节的取值为192-223</p><p>即:  11000000    取值范围是:  11000000-11011111  (192-223)</p><p>192.168.1.1/24  255.255.255.0</p><p>网络地址：192.168.1.0</p><p>广播地址：192.168.1.255</p><p>有效地址：2^8-2  254</p><p>D类网络的地址范围：第一个字节为224–239，用作组播地址。</p><p>E类网络的地址范围：第一个字节为240–255，用于科学用途。</p><h2 id="各类网络地址中网络数和主机数"><a href="#各类网络地址中网络数和主机数" class="headerlink" title="各类网络地址中网络数和主机数"></a><strong>各类网络地址中网络数和主机数</strong></h2><p>A 类网络地址：</p><p>　　　　　　实际可用的A类网络地址数为：2^7=128</p><p>​                         合法的主机数为：2 ^24－2＝16777214</p><p>B类网络地址：</p><p>　　　　　　实际可用的B类网络地址数为：2^14=16384</p><p>​                        合法的主机数为：2^16-2=65534</p><p>C类网络地址：</p><p>　　　　　　实际可用的C类网络地址数为：2^21=2097152</p><p>​                        合法的主机数为：2^8-2=254</p><p><strong>私有IP地址范围 在公网中是不能路由的，必须经过地址转换</strong></p><p> A类　10.0.0.0~10.255.255.255</p><p> B类    172.16.0.0~172.31.255.255</p><p> C类    192.168.0.0~192.168.255.255</p><h2 id="变长子网掩码"><a href="#变长子网掩码" class="headerlink" title="变长子网掩码"></a><strong>变长子网掩码</strong></h2><p>使用长度不同的子网掩码将网络划分成多个子网，适用于不同类型的网络设计，称为VLSM组网。</p><p>分类路由选择：RIP1  IGRP协议</p><p>无类路由选择：RIP2　EIGRP　OSPF等协议</p><p><strong>有类路由</strong>：汇总以后地址是标准的A B C类地址掩码即255.0.0.0 255.255.0.0 255.255.255.0 (有类路由里大类网络中子网码必须一致这样叫做有类路由因为有类路由协议不传递子网码信息)</p><p><strong>无类路由</strong>：汇总以后地址是无类的比如 172.16.12.0/16 - 172.16.15.0/16 汇总以后的地址是 172.16.12.0/20 子码 不属于A B C 3个类别(无类路由是相反的，他传递子网信息所有大类网络中可以使用不同的子网码)</p><p><strong>地址汇总</strong>：<br>汇总：也叫路由聚合，让路由选择协议能够用一个地址通告众多网络。旨在缩小路由器中路由选择表的规模，以节省内存，并缩短IP对路由选择表进行分析以找出前往远程网络的所需时间。</p><p>汇总实际上比较简单，因为你只需确定块大小，而这些块大小我们在学习子网划分和VLSM设计时都使用过。例如，如果要将如F网络汇总到一个网络通告中,只需确定块大小，你就能轻松地找出答案:<br>网络192.168. 16.0~ 192.168.31.0<br>块大小是多少呢?这总共恰好有16个C类网络，使用块大小16刚好能满足需求。<br>知道块大小后，你便可确定网络地址和子网掩码，它们可用于将这些网络汇总到-个通告中。用于通告汇总地址的网络地址总是块中的第-一个网络地址,这里为192.168.16.0。 在这个例子中，为确定子网掩码，什么样的子网掩码提供的块大小为16呢?答案是240, 应将第三个字节(进行汇总的字节)设置为240,因此子网掩码为255.255.240.0。<br>再来看一个示例，但这次从主机的角度看。<br>如果汇总地址为192.168.144.0/20, 我们将根据它转发前往哪些主机地址的分组?在这里，汇总地址为192.168.144.0,子网掩码为255.255.240.0。<br>第三个字节的块大小为16, 而被汇总的第一个地址为192.168.144.0, 在第三个字节加上块大小16后为160，因此汇总的地址范围为144~ 159。</p>]]></content>
      
      
      
        <tags>
            
            <tag> IP地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RIP 路由协议</title>
      <link href="/2019/08/09/my-first-blog/"/>
      <url>/2019/08/09/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p>动态路由协议包括距离向量路由协议和链路状态路由协议。RIP（Routing InformationProtocols,路由信息协议）是使用最广泛的距离向量路由协议。RIP 是为小型网络环境设计的，因为这类协议的路由学习及路由更新将产生较大的流量,占用过多的带宽。</p><a id="more"></a><h2 id="RIP-概述"><a href="#RIP-概述" class="headerlink" title="RIP 概述"></a><strong>RIP 概述</strong></h2><p>RIP 是由Xerox 在70 年代开发的，最初定义在RFC1058 中。RIP 用两种数据包传输更新:更新和请求,每个有RIP 功能的路由器默认情况下每隔30 秒利用UDP 520 端口向与它直连的网络邻居广播(RIP v1)或组播(RIP v2)路由更新。因此路由器不知道网络的全局情况,如果路由更新在网络上传播慢，将会导致网络收敛较慢，造成路由环路。为了避免路由环路， RIP 采用水平分割、毒性逆转、定义最大跳数、闪式更新、抑制计时5 个机制来避免路由环路。 </p><p>RIP 协议分为版本1 和版本2。不论是版本1 或版本2，都具备下面的特征： </p><ol><li>是距离向量路由协议； </li><li>使用跳数（Hop Count）作为度量值； </li><li>默认路由更新周期为30 秒；</li><li>管理距离（AD）为120； </li><li>支持触发更新； </li><li>最大跳数为15 跳； </li><li>支持等价路径,默认4 条,最大6 条； </li><li>使用UDP520 端口进行路由更新。</li></ol><p>而RIPv1 和RIPv2 的区别如表 </p><table><thead><tr><th>RIPv1</th><th>RIPv2</th></tr></thead><tbody><tr><td>在路由更新的过程中不携带子网信息</td><td>在路由更新的过程中携带子网信息</td></tr><tr><td>不提供认证</td><td>提供明文和MD5认证</td></tr><tr><td>不支持VLSM和CIDR</td><td>支持VLSM和CIDR</td></tr><tr><td>采用广播更新</td><td>采用组播（224.0.0.9）更新</td></tr><tr><td>有类别（Classful）路由协议</td><td>无类别（Classless）路由协议</td></tr></tbody></table><p><img src="https://s2.ax1x.com/2019/08/19/m34VjP.png" alt></p><p>首先保证直连的连通性</p><p>在R1上:</p><pre><code>R1(config)#interface fastEthernet 0/0 R1(config-if)#ip address 12.1.1.1 255.255.255.0 R1(config-if)#no shutdown  R1(config-if)#exit  R1(config)#interface loopback 0 R1(config-if)#ip address 11.1.1.1 255.255.255.0</code></pre><p>在R2上:</p><pre><code>R2(config)#interface fastEthernet 1/0 R2(config-if)#ip address 23.1.1.2 255.255.255.0 R2(config-if)#no shutdown  R2(config-if)#exit R2(config)#interface loopback 0 R2(config-if)#ip address 22.1.1.1 255.255.255.0</code></pre><p>在R3上:</p><pre><code>R3(config)#interface fastEthernet 0/0R3(config-if)#ip address 23.1.1.3 255.255.255.0R3(config-if)#no shutdown R3(config-if)#exitR3(config)#interface loopback 0R3(config-if)#ip address 33.1.1.1 255.255.255.0</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> RIP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
